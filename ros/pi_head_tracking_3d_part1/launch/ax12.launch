<launch>
	<!-- Define the namespace for all our controllers -->
	<arg name="dynamixel_namespace" value="dynamixel_controller" />

    <!-- Load the URDF/Xacro model of our robot -->
	<param name="robot_description" command="$(find xacro)/xacro.py '$(find pi_head_tracking_3d_part1)/urdf/kinectbot.urdf.xacro'" />

    <!-- Publish the robot state -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
    	<param name="publish_frequency" value="20.0"/>
    </node>

	<!-- Start the ax12 controller manager -->
	<node name="dynamixel_manager" pkg="dynamixel_controllers" type="controller_manager.py" required="true" output="screen">
        <rosparam>
            namespace: dynamixel_controller
            serial_ports:
                dxl_tty1:
                    port_name: "/dev/ttyUSB0"
                    baud_rate: 1000000
                    min_motor_id: 1
                    max_motor_id: 2
                    update_rate: 10
        </rosparam>
    </node>

    <!-- Load joint controller configuration to parameter server -->
    <rosparam ns="$(arg dynamixel_namespace)" file="$(find pi_head_tracking_3d_part1)/params/ax12_params.yaml" command="load"/>

      
    <!-- Start pan joint controller -->
    <rosparam file="$(find dynamixel_tutorials)/pan.yaml" command="load"/>
    <node name="pan_controller_spawner" pkg="dynamixel_controllers" type="controller_spawner.py" args="--manager dynamixel_controller --port dxl_tty1 head_pan_controller" output="screen"/>

    <!-- Start tilt joint controller -->
    <rosparam file="$(find dynamixel_tutorials)/tilt.yaml" command="load"/>
    <node name="tilt_controller_spawner" pkg="dynamixel_controllers" type="controller_spawner.py" args="--manager dynamixel_controller --port dxl_tty1 head_tilt_controller" output="screen"/>
        
    <!-- Start the ax12 joint state publisher -->
    <node name="ax12_joint_state_publisher" pkg="pi_head_tracking_3d_part1" type="ax12_joint_state_publisher.py" />
    
   <!-- Publish a static transform between the robot base and the world frame -->
   <node pkg="tf" type="static_transform_publisher" name="world_base_broadcaster" args="0 0 0.0325 0 0 0 /world /base_link 100" />
</launch>
