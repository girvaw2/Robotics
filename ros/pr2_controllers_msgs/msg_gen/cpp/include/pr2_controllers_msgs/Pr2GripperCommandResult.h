/* Auto-generated by genmsg_cpp for file /home/billy/ros/stacks/pr2_controllers_msgs/msg/Pr2GripperCommandResult.msg */
#ifndef PR2_CONTROLLERS_MSGS_MESSAGE_PR2GRIPPERCOMMANDRESULT_H
#define PR2_CONTROLLERS_MSGS_MESSAGE_PR2GRIPPERCOMMANDRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr2_controllers_msgs
{
template <class ContainerAllocator>
struct Pr2GripperCommandResult_ {
  typedef Pr2GripperCommandResult_<ContainerAllocator> Type;

  Pr2GripperCommandResult_()
  : position(0.0)
  , effort(0.0)
  , stalled(false)
  , reached_goal(false)
  {
  }

  Pr2GripperCommandResult_(const ContainerAllocator& _alloc)
  : position(0.0)
  , effort(0.0)
  , stalled(false)
  , reached_goal(false)
  {
  }

  typedef double _position_type;
  double position;

  typedef double _effort_type;
  double effort;

  typedef uint8_t _stalled_type;
  uint8_t stalled;

  typedef uint8_t _reached_goal_type;
  uint8_t reached_goal;


private:
  static const char* __s_getDataType_() { return "pr2_controllers_msgs/Pr2GripperCommandResult"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "e4cbff56d3562bcf113da5a5adeef91f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
float64 position  # The current gripper gap size (in meters)\n\
float64 effort    # The current effort exerted (in Newtons)\n\
bool stalled      # True iff the gripper is exerting max effort and not moving\n\
bool reached_goal # True iff the gripper position has reached the commanded setpoint\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, effort);
    ros::serialization::serialize(stream, stalled);
    ros::serialization::serialize(stream, reached_goal);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, effort);
    ros::serialization::deserialize(stream, stalled);
    ros::serialization::deserialize(stream, reached_goal);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(effort);
    size += ros::serialization::serializationLength(stalled);
    size += ros::serialization::serializationLength(reached_goal);
    return size;
  }

  typedef boost::shared_ptr< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Pr2GripperCommandResult
typedef  ::pr2_controllers_msgs::Pr2GripperCommandResult_<std::allocator<void> > Pr2GripperCommandResult;

typedef boost::shared_ptr< ::pr2_controllers_msgs::Pr2GripperCommandResult> Pr2GripperCommandResultPtr;
typedef boost::shared_ptr< ::pr2_controllers_msgs::Pr2GripperCommandResult const> Pr2GripperCommandResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_controllers_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e4cbff56d3562bcf113da5a5adeef91f";
  }

  static const char* value(const  ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe4cbff56d3562bcfULL;
  static const uint64_t static_value2 = 0x113da5a5adeef91fULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_controllers_msgs/Pr2GripperCommandResult";
  }

  static const char* value(const  ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
float64 position  # The current gripper gap size (in meters)\n\
float64 effort    # The current effort exerted (in Newtons)\n\
bool stalled      # True iff the gripper is exerting max effort and not moving\n\
bool reached_goal # True iff the gripper position has reached the commanded setpoint\n\
\n\
";
  }

  static const char* value(const  ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.effort);
    stream.next(m.stalled);
    stream.next(m.reached_goal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Pr2GripperCommandResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_controllers_msgs::Pr2GripperCommandResult_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "effort: ";
    Printer<double>::stream(s, indent + "  ", v.effort);
    s << indent << "stalled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stalled);
    s << indent << "reached_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reached_goal);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_CONTROLLERS_MSGS_MESSAGE_PR2GRIPPERCOMMANDRESULT_H

