/* Auto-generated by genmsg_cpp for file /home/billy/ros/stacks/pr2_controllers_msgs/msg/JointControllerState.msg */
#ifndef PR2_CONTROLLERS_MSGS_MESSAGE_JOINTCONTROLLERSTATE_H
#define PR2_CONTROLLERS_MSGS_MESSAGE_JOINTCONTROLLERSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace pr2_controllers_msgs
{
template <class ContainerAllocator>
struct JointControllerState_ {
  typedef JointControllerState_<ContainerAllocator> Type;

  JointControllerState_()
  : header()
  , set_point(0.0)
  , process_value(0.0)
  , process_value_dot(0.0)
  , error(0.0)
  , time_step(0.0)
  , command(0.0)
  , p(0.0)
  , i(0.0)
  , d(0.0)
  , i_clamp(0.0)
  {
  }

  JointControllerState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , set_point(0.0)
  , process_value(0.0)
  , process_value_dot(0.0)
  , error(0.0)
  , time_step(0.0)
  , command(0.0)
  , p(0.0)
  , i(0.0)
  , d(0.0)
  , i_clamp(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef double _set_point_type;
  double set_point;

  typedef double _process_value_type;
  double process_value;

  typedef double _process_value_dot_type;
  double process_value_dot;

  typedef double _error_type;
  double error;

  typedef double _time_step_type;
  double time_step;

  typedef double _command_type;
  double command;

  typedef double _p_type;
  double p;

  typedef double _i_type;
  double i;

  typedef double _d_type;
  double d;

  typedef double _i_clamp_type;
  double i_clamp;


private:
  static const char* __s_getDataType_() { return "pr2_controllers_msgs/JointControllerState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "c0d034a7bf20aeb1c37f3eccb7992b69"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
float64 set_point\n\
float64 process_value\n\
float64 process_value_dot\n\
float64 error\n\
float64 time_step\n\
float64 command\n\
float64 p\n\
float64 i\n\
float64 d\n\
float64 i_clamp\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, set_point);
    ros::serialization::serialize(stream, process_value);
    ros::serialization::serialize(stream, process_value_dot);
    ros::serialization::serialize(stream, error);
    ros::serialization::serialize(stream, time_step);
    ros::serialization::serialize(stream, command);
    ros::serialization::serialize(stream, p);
    ros::serialization::serialize(stream, i);
    ros::serialization::serialize(stream, d);
    ros::serialization::serialize(stream, i_clamp);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, set_point);
    ros::serialization::deserialize(stream, process_value);
    ros::serialization::deserialize(stream, process_value_dot);
    ros::serialization::deserialize(stream, error);
    ros::serialization::deserialize(stream, time_step);
    ros::serialization::deserialize(stream, command);
    ros::serialization::deserialize(stream, p);
    ros::serialization::deserialize(stream, i);
    ros::serialization::deserialize(stream, d);
    ros::serialization::deserialize(stream, i_clamp);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(set_point);
    size += ros::serialization::serializationLength(process_value);
    size += ros::serialization::serializationLength(process_value_dot);
    size += ros::serialization::serializationLength(error);
    size += ros::serialization::serializationLength(time_step);
    size += ros::serialization::serializationLength(command);
    size += ros::serialization::serializationLength(p);
    size += ros::serialization::serializationLength(i);
    size += ros::serialization::serializationLength(d);
    size += ros::serialization::serializationLength(i_clamp);
    return size;
  }

  typedef boost::shared_ptr< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointControllerState
typedef  ::pr2_controllers_msgs::JointControllerState_<std::allocator<void> > JointControllerState;

typedef boost::shared_ptr< ::pr2_controllers_msgs::JointControllerState> JointControllerStatePtr;
typedef boost::shared_ptr< ::pr2_controllers_msgs::JointControllerState const> JointControllerStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_controllers_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c0d034a7bf20aeb1c37f3eccb7992b69";
  }

  static const char* value(const  ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc0d034a7bf20aeb1ULL;
  static const uint64_t static_value2 = 0xc37f3eccb7992b69ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_controllers_msgs/JointControllerState";
  }

  static const char* value(const  ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float64 set_point\n\
float64 process_value\n\
float64 process_value_dot\n\
float64 error\n\
float64 time_step\n\
float64 command\n\
float64 p\n\
float64 i\n\
float64 d\n\
float64 i_clamp\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.set_point);
    stream.next(m.process_value);
    stream.next(m.process_value_dot);
    stream.next(m.error);
    stream.next(m.time_step);
    stream.next(m.command);
    stream.next(m.p);
    stream.next(m.i);
    stream.next(m.d);
    stream.next(m.i_clamp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointControllerState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_controllers_msgs::JointControllerState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "set_point: ";
    Printer<double>::stream(s, indent + "  ", v.set_point);
    s << indent << "process_value: ";
    Printer<double>::stream(s, indent + "  ", v.process_value);
    s << indent << "process_value_dot: ";
    Printer<double>::stream(s, indent + "  ", v.process_value_dot);
    s << indent << "error: ";
    Printer<double>::stream(s, indent + "  ", v.error);
    s << indent << "time_step: ";
    Printer<double>::stream(s, indent + "  ", v.time_step);
    s << indent << "command: ";
    Printer<double>::stream(s, indent + "  ", v.command);
    s << indent << "p: ";
    Printer<double>::stream(s, indent + "  ", v.p);
    s << indent << "i: ";
    Printer<double>::stream(s, indent + "  ", v.i);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "i_clamp: ";
    Printer<double>::stream(s, indent + "  ", v.i_clamp);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_CONTROLLERS_MSGS_MESSAGE_JOINTCONTROLLERSTATE_H

