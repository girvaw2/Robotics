/* Auto-generated by genmsg_cpp for file /home/billy/ros/stacks/control/control_msgs/msg/JointTolerance.msg */
#ifndef CONTROL_MSGS_MESSAGE_JOINTTOLERANCE_H
#define CONTROL_MSGS_MESSAGE_JOINTTOLERANCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace control_msgs
{
template <class ContainerAllocator>
struct JointTolerance_ {
  typedef JointTolerance_<ContainerAllocator> Type;

  JointTolerance_()
  : name()
  , position(0.0)
  , velocity(0.0)
  , acceleration(0.0)
  {
  }

  JointTolerance_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , position(0.0)
  , velocity(0.0)
  , acceleration(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef double _position_type;
  double position;

  typedef double _velocity_type;
  double velocity;

  typedef double _acceleration_type;
  double acceleration;


private:
  static const char* __s_getDataType_() { return "control_msgs/JointTolerance"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f544fe9c16cf04547e135dd6063ff5be"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# The tolerances specify the amount the position, velocity, and\n\
# accelerations can vary from the setpoints.  For example, in the case\n\
# of trajectory control, when the actual position varies beyond\n\
# (desired position + position tolerance), the trajectory goal may\n\
# abort.\n\
# \n\
# There are two special values for tolerances:\n\
#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n\
#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be\n\
#         allowed to move without restriction.\n\
\n\
string name\n\
float64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\n\
float64 velocity  # in rad/sec or m/sec\n\
float64 acceleration  # in rad/sec^2 or m/sec^2\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, velocity);
    ros::serialization::serialize(stream, acceleration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, velocity);
    ros::serialization::deserialize(stream, acceleration);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(velocity);
    size += ros::serialization::serializationLength(acceleration);
    return size;
  }

  typedef boost::shared_ptr< ::control_msgs::JointTolerance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::JointTolerance_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointTolerance
typedef  ::control_msgs::JointTolerance_<std::allocator<void> > JointTolerance;

typedef boost::shared_ptr< ::control_msgs::JointTolerance> JointTolerancePtr;
typedef boost::shared_ptr< ::control_msgs::JointTolerance const> JointToleranceConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::control_msgs::JointTolerance_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::control_msgs::JointTolerance_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace control_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::control_msgs::JointTolerance_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::control_msgs::JointTolerance_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::JointTolerance_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f544fe9c16cf04547e135dd6063ff5be";
  }

  static const char* value(const  ::control_msgs::JointTolerance_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf544fe9c16cf0454ULL;
  static const uint64_t static_value2 = 0x7e135dd6063ff5beULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::JointTolerance_<ContainerAllocator> > {
  static const char* value() 
  {
    return "control_msgs/JointTolerance";
  }

  static const char* value(const  ::control_msgs::JointTolerance_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::JointTolerance_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# The tolerances specify the amount the position, velocity, and\n\
# accelerations can vary from the setpoints.  For example, in the case\n\
# of trajectory control, when the actual position varies beyond\n\
# (desired position + position tolerance), the trajectory goal may\n\
# abort.\n\
# \n\
# There are two special values for tolerances:\n\
#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n\
#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be\n\
#         allowed to move without restriction.\n\
\n\
string name\n\
float64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\n\
float64 velocity  # in rad/sec or m/sec\n\
float64 acceleration  # in rad/sec^2 or m/sec^2\n\
\n\
";
  }

  static const char* value(const  ::control_msgs::JointTolerance_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::control_msgs::JointTolerance_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.acceleration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointTolerance_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::JointTolerance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::control_msgs::JointTolerance_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_JOINTTOLERANCE_H

