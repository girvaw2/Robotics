/* Auto-generated by genmsg_cpp for file /home/billy/ros/stacks/dynamixel_motor/dynamixel_controllers/srv/StartController.srv */
#ifndef DYNAMIXEL_CONTROLLERS_SERVICE_STARTCONTROLLER_H
#define DYNAMIXEL_CONTROLLERS_SERVICE_STARTCONTROLLER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace dynamixel_controllers
{
template <class ContainerAllocator>
struct StartControllerRequest_ {
  typedef StartControllerRequest_<ContainerAllocator> Type;

  StartControllerRequest_()
  : port_name()
  , package_path()
  , module_name()
  , class_name()
  , controller_name()
  , dependencies()
  {
  }

  StartControllerRequest_(const ContainerAllocator& _alloc)
  : port_name(_alloc)
  , package_path(_alloc)
  , module_name(_alloc)
  , class_name(_alloc)
  , controller_name(_alloc)
  , dependencies(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _port_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  port_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _package_path_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  package_path;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _module_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  module_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _class_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  class_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _controller_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  controller_name;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _dependencies_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  dependencies;


  ROS_DEPRECATED uint32_t get_dependencies_size() const { return (uint32_t)dependencies.size(); }
  ROS_DEPRECATED void set_dependencies_size(uint32_t size) { dependencies.resize((size_t)size); }
  ROS_DEPRECATED void get_dependencies_vec(std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) const { vec = this->dependencies; }
  ROS_DEPRECATED void set_dependencies_vec(const std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other > & vec) { this->dependencies = vec; }
private:
  static const char* __s_getDataType_() { return "dynamixel_controllers/StartControllerRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "7785d708c83a180befd2fe3450dd9d41"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "94c76c2df56346fcaa2611bdac54f434"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string port_name\n\
string package_path\n\
string module_name\n\
string class_name\n\
string controller_name\n\
string[] dependencies\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, port_name);
    ros::serialization::serialize(stream, package_path);
    ros::serialization::serialize(stream, module_name);
    ros::serialization::serialize(stream, class_name);
    ros::serialization::serialize(stream, controller_name);
    ros::serialization::serialize(stream, dependencies);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, port_name);
    ros::serialization::deserialize(stream, package_path);
    ros::serialization::deserialize(stream, module_name);
    ros::serialization::deserialize(stream, class_name);
    ros::serialization::deserialize(stream, controller_name);
    ros::serialization::deserialize(stream, dependencies);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(port_name);
    size += ros::serialization::serializationLength(package_path);
    size += ros::serialization::serializationLength(module_name);
    size += ros::serialization::serializationLength(class_name);
    size += ros::serialization::serializationLength(controller_name);
    size += ros::serialization::serializationLength(dependencies);
    return size;
  }

  typedef boost::shared_ptr< ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartControllerRequest
typedef  ::dynamixel_controllers::StartControllerRequest_<std::allocator<void> > StartControllerRequest;

typedef boost::shared_ptr< ::dynamixel_controllers::StartControllerRequest> StartControllerRequestPtr;
typedef boost::shared_ptr< ::dynamixel_controllers::StartControllerRequest const> StartControllerRequestConstPtr;


template <class ContainerAllocator>
struct StartControllerResponse_ {
  typedef StartControllerResponse_<ContainerAllocator> Type;

  StartControllerResponse_()
  : success(false)
  , reason()
  {
  }

  StartControllerResponse_(const ContainerAllocator& _alloc)
  : success(false)
  , reason(_alloc)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  reason;


private:
  static const char* __s_getDataType_() { return "dynamixel_controllers/StartControllerResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a4d50a34d34f18de48e2436ff1472594"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "94c76c2df56346fcaa2611bdac54f434"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
string reason\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    ros::serialization::serialize(stream, reason);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    ros::serialization::deserialize(stream, reason);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    size += ros::serialization::serializationLength(reason);
    return size;
  }

  typedef boost::shared_ptr< ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartControllerResponse
typedef  ::dynamixel_controllers::StartControllerResponse_<std::allocator<void> > StartControllerResponse;

typedef boost::shared_ptr< ::dynamixel_controllers::StartControllerResponse> StartControllerResponsePtr;
typedef boost::shared_ptr< ::dynamixel_controllers::StartControllerResponse const> StartControllerResponseConstPtr;

struct StartController
{

typedef StartControllerRequest Request;
typedef StartControllerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StartController
} // namespace dynamixel_controllers

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7785d708c83a180befd2fe3450dd9d41";
  }

  static const char* value(const  ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7785d708c83a180bULL;
  static const uint64_t static_value2 = 0xefd2fe3450dd9d41ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_controllers/StartControllerRequest";
  }

  static const char* value(const  ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string port_name\n\
string package_path\n\
string module_name\n\
string class_name\n\
string controller_name\n\
string[] dependencies\n\
\n\
";
  }

  static const char* value(const  ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a4d50a34d34f18de48e2436ff1472594";
  }

  static const char* value(const  ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa4d50a34d34f18deULL;
  static const uint64_t static_value2 = 0x48e2436ff1472594ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_controllers/StartControllerResponse";
  }

  static const char* value(const  ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
string reason\n\
\n\
\n\
";
  }

  static const char* value(const  ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel_controllers::StartControllerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.port_name);
    stream.next(m.package_path);
    stream.next(m.module_name);
    stream.next(m.class_name);
    stream.next(m.controller_name);
    stream.next(m.dependencies);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartControllerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel_controllers::StartControllerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
    stream.next(m.reason);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartControllerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<dynamixel_controllers::StartController> {
  static const char* value() 
  {
    return "94c76c2df56346fcaa2611bdac54f434";
  }

  static const char* value(const dynamixel_controllers::StartController&) { return value(); } 
};

template<>
struct DataType<dynamixel_controllers::StartController> {
  static const char* value() 
  {
    return "dynamixel_controllers/StartController";
  }

  static const char* value(const dynamixel_controllers::StartController&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamixel_controllers::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "94c76c2df56346fcaa2611bdac54f434";
  }

  static const char* value(const dynamixel_controllers::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamixel_controllers::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_controllers/StartController";
  }

  static const char* value(const dynamixel_controllers::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamixel_controllers::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "94c76c2df56346fcaa2611bdac54f434";
  }

  static const char* value(const dynamixel_controllers::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamixel_controllers::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_controllers/StartController";
  }

  static const char* value(const dynamixel_controllers::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DYNAMIXEL_CONTROLLERS_SERVICE_STARTCONTROLLER_H

