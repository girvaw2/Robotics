/* Auto-generated by genmsg_cpp for file /home/billy/ros/stacks/dynamixel_motor/dynamixel_msgs/msg/MotorStateList.msg */
#ifndef DYNAMIXEL_MSGS_MESSAGE_MOTORSTATELIST_H
#define DYNAMIXEL_MSGS_MESSAGE_MOTORSTATELIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "dynamixel_msgs/MotorState.h"

namespace dynamixel_msgs
{
template <class ContainerAllocator>
struct MotorStateList_ {
  typedef MotorStateList_<ContainerAllocator> Type;

  MotorStateList_()
  : motor_states()
  {
  }

  MotorStateList_(const ContainerAllocator& _alloc)
  : motor_states(_alloc)
  {
  }

  typedef std::vector< ::dynamixel_msgs::MotorState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dynamixel_msgs::MotorState_<ContainerAllocator> >::other >  _motor_states_type;
  std::vector< ::dynamixel_msgs::MotorState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dynamixel_msgs::MotorState_<ContainerAllocator> >::other >  motor_states;


  ROS_DEPRECATED uint32_t get_motor_states_size() const { return (uint32_t)motor_states.size(); }
  ROS_DEPRECATED void set_motor_states_size(uint32_t size) { motor_states.resize((size_t)size); }
  ROS_DEPRECATED void get_motor_states_vec(std::vector< ::dynamixel_msgs::MotorState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dynamixel_msgs::MotorState_<ContainerAllocator> >::other > & vec) const { vec = this->motor_states; }
  ROS_DEPRECATED void set_motor_states_vec(const std::vector< ::dynamixel_msgs::MotorState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dynamixel_msgs::MotorState_<ContainerAllocator> >::other > & vec) { this->motor_states = vec; }
private:
  static const char* __s_getDataType_() { return "dynamixel_msgs/MotorStateList"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "9e94ccf6563ca78afce19eb097f9343c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "MotorState[] motor_states\n\
\n\
================================================================================\n\
MSG: dynamixel_msgs/MotorState\n\
float64 timestamp   # motor state is at this time\n\
int32 id            # motor id\n\
int32 goal          # commanded position (in encoder units)\n\
int32 position      # current position (in encoder units)\n\
int32 error         # difference between current and goal positions\n\
int32 speed         # current speed (0.111 rpm per unit)\n\
float64 load        # current load - ratio of applied torque over maximum torque\n\
float64 voltage     # current voltage (V)\n\
int32 temperature   # current temperature (degrees Celsius)\n\
bool moving         # whether the motor is currently in motion\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, motor_states);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, motor_states);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(motor_states);
    return size;
  }

  typedef boost::shared_ptr< ::dynamixel_msgs::MotorStateList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_msgs::MotorStateList_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MotorStateList
typedef  ::dynamixel_msgs::MotorStateList_<std::allocator<void> > MotorStateList;

typedef boost::shared_ptr< ::dynamixel_msgs::MotorStateList> MotorStateListPtr;
typedef boost::shared_ptr< ::dynamixel_msgs::MotorStateList const> MotorStateListConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamixel_msgs::MotorStateList_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamixel_msgs::MotorStateList_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamixel_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel_msgs::MotorStateList_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel_msgs::MotorStateList_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_msgs::MotorStateList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9e94ccf6563ca78afce19eb097f9343c";
  }

  static const char* value(const  ::dynamixel_msgs::MotorStateList_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9e94ccf6563ca78aULL;
  static const uint64_t static_value2 = 0xfce19eb097f9343cULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_msgs::MotorStateList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_msgs/MotorStateList";
  }

  static const char* value(const  ::dynamixel_msgs::MotorStateList_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_msgs::MotorStateList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "MotorState[] motor_states\n\
\n\
================================================================================\n\
MSG: dynamixel_msgs/MotorState\n\
float64 timestamp   # motor state is at this time\n\
int32 id            # motor id\n\
int32 goal          # commanded position (in encoder units)\n\
int32 position      # current position (in encoder units)\n\
int32 error         # difference between current and goal positions\n\
int32 speed         # current speed (0.111 rpm per unit)\n\
float64 load        # current load - ratio of applied torque over maximum torque\n\
float64 voltage     # current voltage (V)\n\
int32 temperature   # current temperature (degrees Celsius)\n\
bool moving         # whether the motor is currently in motion\n\
\n\
";
  }

  static const char* value(const  ::dynamixel_msgs::MotorStateList_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel_msgs::MotorStateList_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.motor_states);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotorStateList_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_msgs::MotorStateList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamixel_msgs::MotorStateList_<ContainerAllocator> & v) 
  {
    s << indent << "motor_states[]" << std::endl;
    for (size_t i = 0; i < v.motor_states.size(); ++i)
    {
      s << indent << "  motor_states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dynamixel_msgs::MotorState_<ContainerAllocator> >::stream(s, indent + "    ", v.motor_states[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_MSGS_MESSAGE_MOTORSTATELIST_H

